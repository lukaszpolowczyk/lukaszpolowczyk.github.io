{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "AdvancedPanel.svelte",
    "App.svelte",
    "CanvasWave.svelte",
    "Formula.svelte",
    "Panel.svelte",
    "PeriodicWave.svelte"
  ],
  "sourcesContent": [
    "<script>\n\t\n\timport PeriodicWave from \"./PeriodicWave.svelte\";\n\timport Formula from \"./Formula.svelte\";\n\t\n\timport { real, imag } from \"./wave.js\"\nimport { tick } from \"svelte\";\n\t// import { volume, dur, freq, cents } from \"./wave.js\"\n\t\n\t// $:aWave = { real: $real, imag: $imag, volume: $volume, dur: $dur, freq: $freq, cents: $cents };\n\t\n\t// export let doSound;\n\t\n\tlet mixLength = 1;\n\t// let arrLength = $real.length;\n\t\n\t\nfunction lengthChange (event) {\n\tconst value = Number(event.target.value);\n\t\n\tconst oReal = $real;\n\tconst nReal = Array(value).fill(0).map((val,i)=>oReal[i]||val);\n\t$real = [...nReal];\n\t\n\t\n\tconst oImag = $imag;\n\tconst nImag = Array(value).fill(0).map((val,i)=>oImag[i]||val);\n\t$imag = [...nImag];\n}\n\nlet length = $real.length;\nlet usedLength = $real.length;\nconst handleKeyup = (event) => {\n\tif (['Enter',\"NumpadEnter\"].includes(event.code)) {\n\t\tlengthChange(event);\n\t\tusedLength = $real.length;\n\t}\n}\n\nfunction rLengthChange (event) {\n\tlengthChange(event);\n\tlength = $real.length;\n\tusedLength = $real.length;\n}\n</script>\n\n<style>\n\t#pw:not(.is-use) {\n\t\tbackground: red;\n\t}\n</style>\n\n<div style=\"display: flex; white-space: pre-wrap;\">\n\t<input id=\"length\" type=\"range\" min=\"2\" max=\"40\" value={$real.length} on:input={(event)=>rLengthChange(event)}>\n\t<input type=\"number\" size=\"3\" min=\"2\" id=\"pw\" class:is-use={length===usedLength} bind:value={length} on:keyup|preventDefault={handleKeyup} > PW\n\t<div>\n\t\t<Formula bind:arr={$real} title=\"real\" />\n\t\t<Formula bind:arr={$imag} title=\"imag - tutaj duży wzór!\" />\n\t</div>\n</div>\n\n<div style=\"display:flex;\">\n\t<div style=\"flex-shrink:0; flex-direction: column; display: flex;\">\n\t\t<input id=\"mixLength\" type=\"range\" min=\"1\" max=\"40\" bind:value={mixLength} orient=\"vertical\">\n\t\t<input type=\"number\" size=\"3\" min=\"1\" bind:value={mixLength} > Mix\n\t</div>\n\t<div style=\"overflow: hidden;\">\n\t\t<div style=\"overflow: scroll;\">\n\t\t<PeriodicWave bind:real={$real} bind:imag={$imag} />\n\t\t</div>\n\t</div>\n</div>\n",
    "<script>\n\timport Panel from \"./Panel.svelte\";\n</script>\n\n<style>\n  main {\n    font-family: sans-serif;\n    /* text-align: center; */\n  }\n</style>\n<svelte:head>\n\t<title>Sound Generator</title>\n</svelte:head>\n<main>\n\t<h1>Sound Generator</h1>\n\t<Panel />\n</main>\n",
    "<script>\n\timport { onMount } from 'svelte';\n\t\n\t// export let ac;\n\texport let waveform;\n\tlet scopeCanvas;\n\tlet scopeContext;\n\texport let analyser;\n\texport let gainNode;\n\tonMount(()=>{\n\t\tscopeContext = scopeCanvas.getContext('2d');\n\t})\n$:draw(),analyser;\n\n\n// oscilloscope\n// let scopeCanvas;\n// let scopeContext;\n\nconst draw = ()=>{\n        // this.gainNode.connect(analyser);\n\t\t\t\tconsole.log(\"draw\");\nif (!analyser) { return false; }\nconsole.log(\"draw\");\nwaveform = new Float32Array(analyser.frequencyBinCount);\nconsole.log(\"analyser.frequencyBinCount\",analyser.frequencyBinCount)\nanalyser.getFloatTimeDomainData(waveform);\ngainNode.connect(analyser);\n(function updateWaveform() {\n    requestAnimationFrame(updateWaveform);\n    analyser.getFloatTimeDomainData(waveform);\n}());\n\nvar spectrum = new Uint8Array(analyser.frequencyBinCount);\nconsole.log(\"analyser.frequencyBinCount\",analyser.frequencyBinCount);\n(function updateSpectrum() {\n    requestAnimationFrame(updateSpectrum);\n    analyser.getByteFrequencyData(spectrum);\n}());\n\nscopeCanvas.width = waveform.length;\nscopeCanvas.height = scopeCanvas.width * 0.33;\ndrawOscilloscope(waveform);\n\t\n\t(function drawOscilloscopeRAF() {\n\t\tif (waveform[0]!=0) {\n\t\t\t// console.log(waveform);\n\t\t\tdrawOscilloscope(waveform);\n\t\t} else {\n\t\t\trequestAnimationFrame(drawOscilloscopeRAF);\n\t\t}\n\t}());\n};\nfunction drawOscilloscope (waveform) {\n\t\tscopeContext.clearRect(0, 0, scopeCanvas.width, scopeCanvas.height);\n\t\tscopeContext.strokeStyle = \"white\"; // Green path\n\t\tscopeContext.beginPath();\n\t\tfor (var i = 0; i < waveform.length; i++) {\n\t\t\t\tvar x = i;\n\t\t\t\tvar y = (0.5 + waveform[i] / 2) * scopeCanvas.height;\n\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tscopeContext.moveTo(x, y);\n\t\t\t\t} else {\n\t\t\t\t\t\tscopeContext.lineTo(x, y);\n\t\t\t\t}\n\t\t}\n\t\tscopeContext.stroke();\n}\n</script>\n\n<div id=\"canvas-container\">\n\t<canvas bind:this={scopeCanvas} id=\"canvas\" width=\"500\" height=\"375\"></canvas>\n</div>\n\n<style>\n\t#canvas-container {\n\t\tbackground: #4674FA;\n\t}\n\t#canvas {\n\t\tborder-top: 4px solid #e6ebf1;\n\t\tborder-bottom: 4px solid #e6ebf1;\n\t\theight: 200px;\n\t\twidth: 100%;\n\t\tbackground-color: rgba(50, 50, 155, 0.38);\n\t\tbackground-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.4'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n\t\tbackground-position: -35px 95%;\n\t}\n</style>\n",
    "<script>\n\t// import mexp from 'math-expression-evaluator';\n\timport {evaluate} from 'mathjs';\n\timport Formula from '@hapi/formula';\n\tconst functions = {\n    x: (value) => value + 10\n};\n\nconst constants = {\n    Z: 100\n};\n\nconst reference = function (name) {\n    \n    return (context) => context[name];\n};\n\n\nconst formula2 = new Formula.Parser('1 + a.b.c.2.4.x + [b] + x([y + 4] + Z)', { functions, constants, reference });\n\nformula2.evaluate({ 'a.b.c.2.4.x': 2, b: 3, 'y + 4': 5 });       // 1 + 2 + 3 + 5 + 10 + 100\nformula2.evaluate({ 'a.b.c.2.4.x': '2', b: 3, 'y + 4': '5' });   // '123510010'\n\t\n\t\n\texport let arr;\n\texport let title;\n\t\n\tlet usedFormula;\n\tlet formula;\n\t\n\tconst handleKeyup = (event) => {\n\t\tif (['Enter',\"NumpadEnter\"].includes(event.code)) {\n\t\t\tusedFormula = formula;\n\t\t\t// var value = de(\"1/(pi*a)\");\n\t\t\t// real.fill(0);\n\t\t\t// real[0] = 0.5;\n\t\t\tfor (let i = 1; i < arr.length; i++) { // note i starts at 1\n\t\t\t\t// arr[i] = mexp.eval(usedFormula,[{type:3,token:\"a\",value:\"a\",preced:0}],{a:i}); //1 / (i * Math.PI);//\n\t\t\t\tarr[i] = evaluate(usedFormula,{a:i});\n\t\t\t}\n\t\t\t// var value = mexp.eval(\"1/(pi*2)\");\n\t\t\t// console.log(value);\n\t\t}\n\t}\n</script>\n\n<input id=\"formula\" list=\"mf\" title={title} placeholder={title} class:is-use={formula===usedFormula} bind:value={formula} on:keyup|preventDefault={handleKeyup}>\n<datalist id=\"mf\">\n\t<option value=\"2/(-pi*a)\">\n\t<option value=\"1\">\n</datalist>\n\n<style>\n\t#formula:not(.is-use) {\n\t\tbackground: red;\n\t}\n</style>\n",
    "<script>\nimport { bt, btCtrl } from \"./event-fns.js\"\nimport { keys } from \"./keys.js\"\n\nimport CanvasWave from \"./CanvasWave.svelte\";\nimport AdvancedPanel from \"./AdvancedPanel.svelte\";\nimport { onMount } from 'svelte';\nimport { real, imag, wavesArr } from \"./wave.js\"\nimport { volume, dur, freq, cents } from \"./wave.js\"\nconst { saveSound, deleteSound, setName } = wavesArr;\n\nimport {tick} from \"svelte\";\n\n$:aWave = { real: $real, imag: $imag, volume: $volume, dur: $dur, freq: $freq, cents: $cents };\n\nfunction resetSound () {\n\treal.reset();\n\timag.reset();\n}\n\n$:chVal(), $freq,$volume;\nfunction chVal () {\n\tif (!analyser) { return false; }\n\tosc.frequency.value = $freq;\n\tgainNode.gain.value = $volume;\n\tgainNode.gain.setValueAtTime($cents, ac.currentTime);\n}\n\n$:chCustomVal(),$real, $imag;\nfunction chCustomVal () {\n\tif (!analyser || $real.length<2) { return false; }\n\tvar wave = ac.createPeriodicWave(new Float32Array($real), new Float32Array($imag), { disableNormalization: true });\n\tosc.setPeriodicWave(wave);\n}\n\nvar ac = new AudioContext();\nlet analyser;\n// var waveform=[];\nvar gainNode;\nvar osc;\n\nfunction doBasicSound(type = \"sine\") {\n\tac = new AudioContext();\n\tanalyser = ac.createAnalyser();\n\n\tosc = ac.createOscillator(); // instantiate an oscillator\n\tosc.frequency.value = $freq; // Hz\n\t\n\tosc.type = type; // this is the default - also square, sawtooth, triangle\n\n\tgainNode = ac.createGain();\n\tosc.connect(gainNode);\n\tgainNode.connect(ac.destination);\n\tgainNode.gain.value = $volume;\n\tgainNode.gain.setValueAtTime($cents, ac.currentTime);\n\n\n\t//osc.connect(ac.destination);\n\tosc.start(); // start the oscillator\n\t// draw();\n\tosc.stop($dur); // stop 2 seconds after the current time\n}\nlet acx = new AudioContext();\nfunction doSound({ real, imag, volume, freq, dur, cents }) {\n\tac = new AudioContext();\n\tanalyser = ac.createAnalyser();\n\t// waveform = new Float32Array(analyser.frequencyBinCount);\n\t// analyser.getFloatTimeDomainData(waveform);\n\t// drawOscilloscope();\n\t//  ac = acx;\n\tconsole.log(\"cjk\");\n\tosc = ac.createOscillator();\n\tosc.frequency.value = freq; // Hz\n\t// var real = real; //getContext(\"real\");//new Float32Array(2);\n\t// var imag = imag; //getContext(\"imag\");//new Float32Array(2);\n\t// real.fill(1);\n\t// imag.fill(1);\n\t// real[0] = 0;\n\t// imag[0] = 0;\n\t// real[1] = real1;\n\t// imag[1] = 0;\n\tif (real.length<2) { return false; }\n\tvar wave = ac.createPeriodicWave(new Float32Array(real), new Float32Array(imag), { disableNormalization: true });\n\tosc.setPeriodicWave(wave);\n\n\tgainNode = ac.createGain();\n\tosc.connect(gainNode);\n\tgainNode.connect(ac.destination);\n\tgainNode.gain.value = volume;\n\tgainNode.gain.setValueAtTime(cents, ac.currentTime);\n\n\t//osc.connect(ac.destination);\n\tosc.start();\n\t// draw();\n\tosc.stop(dur);\n}\n\n\nfunction waveSetName (i) {\n\tconst defName = $wavesArr[i].name||\"\";\n\tconst name=prompt(\"Edytuj nazwę dźwięku\", defName);\n\tif (name===null) { return false; }\n\tsetName(name, i);\n}\n\nasync function setWave(wave) {\n\t// arrLength = wave.real.length;\n\tawait tick();\n\t$real = [...wave.real];\n\t$imag = [...wave.imag];\n\t$volume = wave.volume;\n\t$dur = wave.dur;\n\t$freq = wave.freq;\n\t$cents = wave.cents;\n}\n\n\n</script>\n\n<CanvasWave bind:analyser bind:gainNode/>\n\n<div style=\"display:flex; gap: 40px;\">\n\t<div style=\"flex-shrink: 0;\">\n\t\t<div id=\"basic-types-buttons\">\n\t\t\t<button on:click={()=>doBasicSound(\"sine\")}>Do Sine</button>\n\t\t\t<button on:click={()=>doBasicSound(\"square\")}>Do Square</button>\n\t\t\t<button on:click={()=>doBasicSound(\"sawtooth\")}>Do Sawtooth</button>\n\t\t\t<button on:click={()=>doBasicSound(\"triangle\")}>Do Triangle</button>\n\t\t</div>\n\t\t<div id=\"panel\">\n\t\t<div class=\"factor\">\n\t\t\t<input id=\"volume\" type=\"range\" bind:value={$volume} step=\"0.01\" min=\"0.0\" max=\"1\">\n\t\t\t<label for=\"volume\">{Math.floor($volume*100)}% volume</label>\n\t\t</div>\n\t\t<div class=\"factor\">\n\t\t\t<input id=\"dur\" type=\"range\" bind:value={$dur} step=\"0.1\" min=\"0.1\" max=\"4\">\n\t\t\t<label for=\"dur\">{$dur} sec</label>\n\t\t</div>\n\t\t<div class=\"factor\">\n\t\t\t<input id=\"freq\" type=\"range\" bind:value={$freq} step=\"1\" min=\"20\" max=\"20000\">\n\t\t\t<input type=\"number\" size=\"5\" bind:value={$freq} step=\"1\" min=\"20\" max=\"20000\"> Hz\n\t\t</div>\n\t\t<div class=\"factor\">\n\t\t\t<input id=\"$cents\" type=\"range\" bind:value={$cents} min=\"0\" step=\"0.1\" max=\"1\">\n\t\t\t<input type=\"number\" size=\"5\" bind:value={$cents} min=\"0\" step=\"0.1\" max=\"1\"> gain</div>\n\t\t</div>\n\t</div>\n\t<div style=\"overflow:hidden;\">\n\t\t<div id=\"custom-types-buttons\">\n\t\t\t<button\n\t\t\t\tstyle=\"margin-right:10px;\"\n\t\t\t\ttitle={keys}\n\t\t\t\ton:mouseup={bt(0, ()=>doSound(aWave) )}\n\t\t\t\ton:mouseup={bt(1, ()=>saveSound(aWave) )}\n\t\t\t\ton:mouseup|preventDefault|stopPropagation={bt(2, ()=>resetSound() )}\n\t\t\t\ton:contextmenu|preventDefault|stopPropagation\n\t\t\t>\n\t\t\t\tDo Sound\n\t\t\t</button>\n\t\t\t\n\t\t\t{#each $wavesArr as wave, i}\n\t\t\t\t<button \n\t\t\t\t\ttitle={`${wave.volume} volume\\n${wave.dur} sec\\n${wave.freq} Hz\\n${wave.cents} gain\\n\\nlength: ${wave.real.length}\\n\\nreal: ${wave.real.join(\", \")}\\n\\nimag: ${wave.imag.join(\", \")}`}\n\t\t\t\t\ton:mouseup|preventDefault|stopPropagation={bt(0, ()=>doSound(wave))}\n\t\t\t\t\ton:mouseup|preventDefault|stopPropagation={bt(1, ()=>setWave(wave))}\n\t\t\t\t\ton:mouseup|preventDefault|stopPropagation={btCtrl(1, ()=>deleteSound(i))}\n\t\t\t\t\ton:mouseup|preventDefault|stopPropagation={bt(2, ()=>saveSound(aWave,i))}\n\t\t\t\t\ton:mouseup|preventDefault|stopPropagation={btCtrl(2, ()=>waveSetName(i))}\n\t\t\t\t\ton:contextmenu|preventDefault|stopPropagation\n\t\t\t\t>Do {wave.name?wave.name:`Cus${i+1}`}</button>\n\t\t\t{/each}\n\t\t</div>\n\t\t<!-- <input id=\"real1\" type=\"number\" bind:value={real1}>\n\t\t<label for=\"real1\">{real1} real1</label> -->\n\t\t<AdvancedPanel doSound={doSound} />\n\t\t\n\t</div>\n</div>\n\n<style>\n\tbutton {\n\t  background: #ff3e00;\n\t  color: white;\n\t  border: none;\n\t  padding: 8px 12px;\n\t  border-radius: 2px;\n\t}\n\t#basic-types-buttons {\n\t  display: flex;\n\t  gap: 10px;\n\t}\n\t#panel {\n\t  display: flex;\n\t  flex-direction: column;\n\t  width: 150px;\n\t  gap: 10px;\n\t  margin-top: 20px;\n\t  margin-bottom: 20px;\n\t  margin-left: auto;\n\t  margin-right: auto;\n\t}\n\t\n\t.factor {\n\t\tdisplay: flex;\n\t}\n\t\n\t#custom-types-buttons {\n\t  display: flex;\n\t  gap: 10px;\n\t\tflex-flow: wrap;\n\t}\n</style>\n",
    "<script>\n  export let real;\n  export let imag;\n  // $: arrReal = new Float32Array(arrLength);//Array(arrLength);\n  // $: arrImag = new Float32Array(arrLength);//Array(arrLength);\n  // $: arrReal.fill(1);\n  // $: arrImag.fill(1);\n</script>\n\n<div class=\"arr\">\n{#each real as item}\n  <input type=\"text\" size=\"6\" bind:value={item} >\n{/each}\n</div>\n<div class=\"arr\">\n{#each imag as item}\n  <input type=\"text\" size=\"6\" bind:value={item} >\n{/each}\n</div>\n\n<style>\n  .arr {\n    display: flex;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA+CC,kBAAG,KAAK,OAAO,CAAC,AAAC,CAAC,AACjB,UAAU,CAAE,GAAG,AAChB,CAAC;AC5CA,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,UAAU,AAEzB,CAAC;ACmEF,iBAAiB,eAAC,CAAC,AAClB,UAAU,CAAE,OAAO,AACpB,CAAC,AACD,OAAO,eAAC,CAAC,AACR,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC7B,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CACzC,gBAAgB,CAAE,IAAI,iqDAAiqD,CAAC,CACxrD,mBAAmB,CAAE,KAAK,CAAC,GAAG,AAC/B,CAAC;ACjCD,sBAAQ,KAAK,OAAO,CAAC,AAAC,CAAC,AACtB,UAAU,CAAE,GAAG,AAChB,CAAC;AC6HD,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,oBAAoB,eAAC,CAAC,AACpB,OAAO,CAAE,IAAI,CACb,GAAG,CAAE,IAAI,AACX,CAAC,AACD,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,KAAK,CACZ,GAAG,CAAE,IAAI,CACT,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,OAAO,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,AACd,CAAC,AAED,qBAAqB,eAAC,CAAC,AACrB,OAAO,CAAE,IAAI,CACb,GAAG,CAAE,IAAI,CACV,SAAS,CAAE,IAAI,AAChB,CAAC;AC7LA,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC"
}